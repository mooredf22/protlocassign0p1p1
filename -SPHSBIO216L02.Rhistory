c(31,26,27,28,29),
c(31,30,30,30,30)),
heights=c(0.85,2,2,2,2,2,2, 2, .25),
widths=c(0.4,2,2,2,2),respect=F)
#layout.show(31)
x <- c(0,5)
y <- c(0,0.5)
par(mar=c(0,0,0,0))
plot(y ~ x,type="n",axes=F,cex=1)
#aa <- 1.34
log2Transf <- F
#log2Transf <- T
fitType <- "relAmt"
#fitType <- "original"
transF <- "no transformation"
if (log2Transf) transF <- "log2 transformed"
text(x=2.5,y=0.4,paste("CPA Synthetic Protein Assignments", fitType, transF), cex=1.5)
legend(x="bottom", legend=loc.list, col=col.list, pch=pch.list, ncol=8)
par(mar=c(3,3,3,3))
for (i in 1:7) {
for (j in (i+1):8) {
mixturePlot(i=i, j=j, type=fitType, log2Transf=log2Transf)
}
}
x <- c(0,5)
y <- c(0,0.5)
par(mar=c(0,0,0,0))
plot(y ~ x,type="n",axes=F,cex=1)
#aa <- 1.34
text(x=2.5,y=0.3,"True proportion", cex=2)
x <- c(0,5)
y <- c(0,0.5)
par(mar=c(0,0,0,0))
plot(y ~ x,type="n",axes=F,cex=1)
#aa <- 1.34
text(x=2.5,y=0.3,"Estimated proportion", cex=2, srt=90)
layout(rbind(c(31,1,1,1,1),
c(31,2,3,4,5),
c(31,6,7,8,9),
c(31,10,11,12,13),
c(31,14,15,16,17),
c(31,18,19,20,21),
c(31,22,23,24,25),
c(31,26,27,28,29),
c(31,30,30,30,30)),
heights=c(0.85,2,2,2,2,2,2, 2, .35),
widths=c(0.4,2,2,2,2),respect=F)
#layout.show(31)
x <- c(0,5)
y <- c(0,0.5)
par(mar=c(0,0,0,0))
plot(y ~ x,type="n",axes=F,cex=1)
#aa <- 1.34
log2Transf <- F
#log2Transf <- T
fitType <- "relAmt"
#fitType <- "original"
transF <- "no transformation"
if (log2Transf) transF <- "log2 transformed"
text(x=2.5,y=0.4,paste("CPA Synthetic Protein Assignments", fitType, transF), cex=1.5)
legend(x="bottom", legend=loc.list, col=col.list, pch=pch.list, ncol=8)
par(mar=c(3,3,3,3))
for (i in 1:7) {
for (j in (i+1):8) {
mixturePlot(i=i, j=j, type=fitType, log2Transf=log2Transf)
}
}
x <- c(0,5)
y <- c(0,0.5)
par(mar=c(0,0,0,0))
plot(y ~ x,type="n",axes=F,cex=1)
#aa <- 1.34
text(x=2.5,y=0.3,"True proportion", cex=2)
x <- c(0,5)
y <- c(0,0.5)
par(mar=c(0,0,0,0))
plot(y ~ x,type="n",axes=F,cex=1)
#aa <- 1.34
text(x=2.5,y=0.3,"Estimated proportion", cex=2, srt=90)
2019 - 2013
2019 - 2003
mixturePlot <- function(i,j,type="relAmt", xaxisLab=T, yaxisLab=T, log2Transf=F) {
#i=1
#j=4
#mixCytoLyso <- proteinMix(relAmtProtFrac, Loc1=i, Loc2=j)
mixProtiProtj <- proteinMix(relAmtProtFrac, Loc1=i, Loc2=j)
#mixCytoLyso
#mixCytoLysoRSA <- RSAtransform(relAmtProtFrac=mixCytoLyso, nDiffFractions=6, nNycFractions=3, totProt=totProt)$rsa
mixProtiProtjRSA <- RSAtransform(relAmtProtFrac=mixProtiProtj, nDiffFractions=6, nNycFractions=3, totProt=totProt)$rsa
#mixCytoLysoRelAmt <- data.frame(rownames(mixCytoLysoRSA), mixCytoLysoRSA)
#names(mixCytoLysoRelAmt)[1] <- "geneName"
mixProtiProtjRelAmt <- data.frame(rownames(mixProtiProtjRSA), mixProtiProtjRSA)
names(mixProtiProtjRelAmt)[1] <- "geneName"
if (type == "relAmt") {
#cpaOutT <- proLocAll(geneProfileSummary=mixCytoLysoRelAmt, matLocR=matLocRrsa,
#      n.channels=7, log2Transf=log2Transf)
cpaOutT <- proLocAll(geneProfileSummary=mixProtiProtjRelAmt, matLocR=matLocRrsa,
n.channels=7, log2Transf=log2Transf)
#cpaOutT
# the fitted proportions match the created ones perfectly
cpaOutData <- cpaOutT[,-1]
}
# Now compute what would have been the original input data:
if (type == "original") {
#rsa <- mixCytoLysoRelAmt[,2:8]
rsa <- mixProtiProtjRelAmt[,2:8]
rsaFractionsT <- t(apply(rsa,1, function(x) x/sum(x)))
#rsaFractions <- data.frame(mixCytoLysoRelAmt[,1], rsaFractionsT)
rsaFractions <- data.frame(mixProtiProtjRelAmt[,1], rsaFractionsT)
names(rsaFractions)[1] <- "geneName"
# Now run CPA on these
cpaOutT <- proLocAll(geneProfileSummary=rsaFractions, matLocR=matLocR, n.channels=7, log2Transf=log2Transf)
cpaOutData <- cpaOutT[,-1]
}
fracList <- seq(0,1,0.1)  # for creating empty plot
fracList2 <- fracList   # same values; needed for empty plot
# plot estimated proportion vs true proportion
plot(fracList ~ fracList2, type="n", xlab="", ylab="", axes=F)  # this is the empty plot
if (yaxisLab) axis(2, labels=T, at=c(0, 0.5, 1), las=1)
if (!yaxisLab) axis(2, labels=F)
if (xaxisLab) axis(1, labels=T, at=c(0, 0.5, 1))
if (!xaxisLab) axis(1, labels=F)
# calculate sum of squares of errors
sumsq <- 0
for (kk in 1:8) {
points(cpaOutData[,kk] ~ fracList, col=col.list[kk], pch=pch.list[kk], cex=1.5)
expect <- rep(0, length(fracList))
if (kk == i) expect <- fracList
if (kk == j) expect <- 1 - fracList
sumsq <- sumsq + sum((cpaOutData[,kk] - expect)^2)
}
abline(a=0,b=1, col="gray")
abline(a=1,b=-1, col="gray")
titleText <- paste(loc.list[i], "-", loc.list[j])
title(paste(titleText, round(sumsq,3)))
}
mixturePlot(i=1, j=4, type="relAmt", log2Transf=F)
mixturePlot(i=1, j=4, type="relAmt", log2Transf=F)
dev.off()
dev.off()
mixturePlot(i=1, j=4, type="relAmt", log2Transf=F)
mixturePlot(i=1, j=4, type="relAmt", log2Transf=T)
mixturePlot(i=3, j=4, type="relAmt")
mixturePlot(i=1, j=4, type="original")
mixturePlot(i=1, j=4, type="original", log2Transf=T)
library(protlocassign)
matLocR
protAbund
mixturePlotPanel <- function(type=relAmt, log2Transf=F) {
#windows(width=8,height=10)
layout(rbind(c(31,1,1,1,1),
c(31,2,3,4,5),
c(31,6,7,8,9),
c(31,10,11,12,13),
c(31,14,15,16,17),
c(31,18,19,20,21),
c(31,22,23,24,25),
c(31,26,27,28,29),
c(31,30,30,30,30)),
heights=c(0.85,2,2,2,2,2,2, 2, .35),
widths=c(0.4,2,2,2,2),respect=F)
#layout.show(31)
x <- c(0,5)
y <- c(0,0.5)
par(mar=c(0,0,0,0))
plot(y ~ x,type="n",axes=F,cex=1)
#aa <- 1.34
log2Transf <- F
#log2Transf <- T
fitType <- "relAmt"
#fitType <- "original"
transF <- "no transformation"
if (log2Transf) transF <- "log2 transformed"
text(x=2.5,y=0.4,paste("CPA Synthetic Protein Assignments", fitType, transF), cex=1.5)
legend(x="bottom", legend=loc.list, col=col.list, pch=pch.list, ncol=8)
par(mar=c(3,3,3,3))
for (i in 1:7) {
for (j in (i+1):8) {
mixturePlot(i=i, j=j, type=fitType, log2Transf=log2Transf)
}
}
x <- c(0,5)
y <- c(0,0.5)
par(mar=c(0,0,0,0))
plot(y ~ x,type="n",axes=F,cex=1)
#aa <- 1.34
text(x=2.5,y=0.3,"True proportion", cex=2)
x <- c(0,5)
y <- c(0,0.5)
par(mar=c(0,0,0,0))
plot(y ~ x,type="n",axes=F,cex=1)
#aa <- 1.34
text(x=2.5,y=0.3,"Estimated proportion", cex=2, srt=90)
}
windows(width=8,height=10)
mixturePlotPanel()
?round
dev.off()
mixturePlot <- function(i,j,type="relAmt", xaxisLab=T, yaxisLab=T, log2Transf=F) {
#i=1
#j=4
#mixCytoLyso <- proteinMix(relAmtProtFrac, Loc1=i, Loc2=j)
mixProtiProtj <- proteinMix(relAmtProtFrac, Loc1=i, Loc2=j)
#mixCytoLyso
#mixCytoLysoRSA <- RSAtransform(relAmtProtFrac=mixCytoLyso, nDiffFractions=6, nNycFractions=3, totProt=totProt)$rsa
mixProtiProtjRSA <- RSAtransform(relAmtProtFrac=mixProtiProtj, nDiffFractions=6, nNycFractions=3, totProt=totProt)$rsa
#mixCytoLysoRelAmt <- data.frame(rownames(mixCytoLysoRSA), mixCytoLysoRSA)
#names(mixCytoLysoRelAmt)[1] <- "geneName"
mixProtiProtjRelAmt <- data.frame(rownames(mixProtiProtjRSA), mixProtiProtjRSA)
names(mixProtiProtjRelAmt)[1] <- "geneName"
if (type == "relAmt") {
#cpaOutT <- proLocAll(geneProfileSummary=mixCytoLysoRelAmt, matLocR=matLocRrsa,
#      n.channels=7, log2Transf=log2Transf)
cpaOutT <- proLocAll(geneProfileSummary=mixProtiProtjRelAmt, matLocR=matLocRrsa,
n.channels=7, log2Transf=log2Transf)
#cpaOutT
# the fitted proportions match the created ones perfectly
cpaOutData <- cpaOutT[,-1]
}
# Now compute what would have been the original input data:
if (type == "original") {
#rsa <- mixCytoLysoRelAmt[,2:8]
rsa <- mixProtiProtjRelAmt[,2:8]
rsaFractionsT <- t(apply(rsa,1, function(x) x/sum(x)))
#rsaFractions <- data.frame(mixCytoLysoRelAmt[,1], rsaFractionsT)
rsaFractions <- data.frame(mixProtiProtjRelAmt[,1], rsaFractionsT)
names(rsaFractions)[1] <- "geneName"
# Now run CPA on these
cpaOutT <- proLocAll(geneProfileSummary=rsaFractions, matLocR=matLocR, n.channels=7, log2Transf=log2Transf)
cpaOutData <- cpaOutT[,-1]
}
fracList <- seq(0,1,0.1)  # for creating empty plot
fracList2 <- fracList   # same values; needed for empty plot
# plot estimated proportion vs true proportion
plot(fracList ~ fracList2, type="n", xlab="", ylab="", axes=F)  # this is the empty plot
if (yaxisLab) axis(2, labels=T, at=c(0, 0.5, 1), las=1)
if (!yaxisLab) axis(2, labels=F)
if (xaxisLab) axis(1, labels=T, at=c(0, 0.5, 1))
if (!xaxisLab) axis(1, labels=F)
# calculate sum of squares of errors
sumsq <- 0
for (kk in 1:8) {
points(cpaOutData[,kk] ~ fracList, col=col.list[kk], pch=pch.list[kk], cex=1.5)
expect <- rep(0, length(fracList))
if (kk == i) expect <- fracList
if (kk == j) expect <- 1 - fracList
sumsq <- sumsq + sum((cpaOutData[,kk] - expect)^2)
}
abline(a=0,b=1, col="gray")
abline(a=1,b=-1, col="gray")
titleText <- paste(loc.list[i], "-", loc.list[j])
title(paste(titleText, signif(sumsq,3)))
}
mixturePlot(i=1, j=4, type="relAmt", log2Transf=F)
x2 <- pi * 100^(-1:3)
round(x2, 3)
signif(x2, 3)
round(0,3)
round(0.1,3)
mixturePlot <- function(i,j,type="relAmt", xaxisLab=T, yaxisLab=T, log2Transf=F) {
#i=1
#j=4
#mixCytoLyso <- proteinMix(relAmtProtFrac, Loc1=i, Loc2=j)
mixProtiProtj <- proteinMix(relAmtProtFrac, Loc1=i, Loc2=j)
#mixCytoLyso
#mixCytoLysoRSA <- RSAtransform(relAmtProtFrac=mixCytoLyso, nDiffFractions=6, nNycFractions=3, totProt=totProt)$rsa
mixProtiProtjRSA <- RSAtransform(relAmtProtFrac=mixProtiProtj, nDiffFractions=6, nNycFractions=3, totProt=totProt)$rsa
#mixCytoLysoRelAmt <- data.frame(rownames(mixCytoLysoRSA), mixCytoLysoRSA)
#names(mixCytoLysoRelAmt)[1] <- "geneName"
mixProtiProtjRelAmt <- data.frame(rownames(mixProtiProtjRSA), mixProtiProtjRSA)
names(mixProtiProtjRelAmt)[1] <- "geneName"
if (type == "relAmt") {
#cpaOutT <- proLocAll(geneProfileSummary=mixCytoLysoRelAmt, matLocR=matLocRrsa,
#      n.channels=7, log2Transf=log2Transf)
cpaOutT <- proLocAll(geneProfileSummary=mixProtiProtjRelAmt, matLocR=matLocRrsa,
n.channels=7, log2Transf=log2Transf)
#cpaOutT
# the fitted proportions match the created ones perfectly
cpaOutData <- cpaOutT[,-1]
}
# Now compute what would have been the original input data:
if (type == "original") {
#rsa <- mixCytoLysoRelAmt[,2:8]
rsa <- mixProtiProtjRelAmt[,2:8]
rsaFractionsT <- t(apply(rsa,1, function(x) x/sum(x)))
#rsaFractions <- data.frame(mixCytoLysoRelAmt[,1], rsaFractionsT)
rsaFractions <- data.frame(mixProtiProtjRelAmt[,1], rsaFractionsT)
names(rsaFractions)[1] <- "geneName"
# Now run CPA on these
cpaOutT <- proLocAll(geneProfileSummary=rsaFractions, matLocR=matLocR, n.channels=7, log2Transf=log2Transf)
cpaOutData <- cpaOutT[,-1]
}
fracList <- seq(0,1,0.1)  # for creating empty plot
fracList2 <- fracList   # same values; needed for empty plot
# plot estimated proportion vs true proportion
plot(fracList ~ fracList2, type="n", xlab="", ylab="", axes=F)  # this is the empty plot
if (yaxisLab) axis(2, labels=T, at=c(0, 0.5, 1), las=1)
if (!yaxisLab) axis(2, labels=F)
if (xaxisLab) axis(1, labels=T, at=c(0, 0.5, 1))
if (!xaxisLab) axis(1, labels=F)
# calculate sum of squares of errors
sumsq <- 0
for (kk in 1:8) {
points(cpaOutData[,kk] ~ fracList, col=col.list[kk], pch=pch.list[kk], cex=1.5)
expect <- rep(0, length(fracList))
if (kk == i) expect <- fracList
if (kk == j) expect <- 1 - fracList
sumsq <- sumsq + sum((cpaOutData[,kk] - expect)^2)
}
abline(a=0,b=1, col="gray")
abline(a=1,b=-1, col="gray")
titleText <- paste(loc.list[i], "-", loc.list[j])
title(paste(titleText, "(", round(sumsq,3), ")"))
}
mixturePlot(i=1, j=4, type="relAmt", log2Transf=F)
windows(width=8,height=10)
mixturePlotPanel()
mixturePlot <- function(i,j,type="relAmt", xaxisLab=T, yaxisLab=T, log2Transf=F) {
#i=1
#j=4
#mixCytoLyso <- proteinMix(relAmtProtFrac, Loc1=i, Loc2=j)
mixProtiProtj <- proteinMix(relAmtProtFrac, Loc1=i, Loc2=j)
#mixCytoLyso
#mixCytoLysoRSA <- RSAtransform(relAmtProtFrac=mixCytoLyso, nDiffFractions=6, nNycFractions=3, totProt=totProt)$rsa
mixProtiProtjRSA <- RSAtransform(relAmtProtFrac=mixProtiProtj, nDiffFractions=6, nNycFractions=3, totProt=totProt)$rsa
#mixCytoLysoRelAmt <- data.frame(rownames(mixCytoLysoRSA), mixCytoLysoRSA)
#names(mixCytoLysoRelAmt)[1] <- "geneName"
mixProtiProtjRelAmt <- data.frame(rownames(mixProtiProtjRSA), mixProtiProtjRSA)
names(mixProtiProtjRelAmt)[1] <- "geneName"
if (type == "relAmt") {
#cpaOutT <- proLocAll(geneProfileSummary=mixCytoLysoRelAmt, matLocR=matLocRrsa,
#      n.channels=7, log2Transf=log2Transf)
cpaOutT <- proLocAll(geneProfileSummary=mixProtiProtjRelAmt, matLocR=matLocRrsa,
n.channels=7, log2Transf=log2Transf)
#cpaOutT
# the fitted proportions match the created ones perfectly
cpaOutData <- cpaOutT[,-1]
}
# Now compute what would have been the original input data:
if (type == "original") {
#rsa <- mixCytoLysoRelAmt[,2:8]
rsa <- mixProtiProtjRelAmt[,2:8]
rsaFractionsT <- t(apply(rsa,1, function(x) x/sum(x)))
#rsaFractions <- data.frame(mixCytoLysoRelAmt[,1], rsaFractionsT)
rsaFractions <- data.frame(mixProtiProtjRelAmt[,1], rsaFractionsT)
names(rsaFractions)[1] <- "geneName"
# Now run CPA on these
cpaOutT <- proLocAll(geneProfileSummary=rsaFractions, matLocR=matLocR, n.channels=7, log2Transf=log2Transf)
cpaOutData <- cpaOutT[,-1]
}
fracList <- seq(0,1,0.1)  # for creating empty plot
fracList2 <- fracList   # same values; needed for empty plot
# plot estimated proportion vs true proportion
plot(fracList ~ fracList2, type="n", xlab="", ylab="", axes=F)  # this is the empty plot
if (yaxisLab) axis(2, labels=T, at=c(0, 0.5, 1), las=1)
if (!yaxisLab) axis(2, labels=F)
if (xaxisLab) axis(1, labels=T, at=c(0, 0.5, 1))
if (!xaxisLab) axis(1, labels=F)
# calculate sum of squares of errors
sumsq <- 0
for (kk in 1:8) {
points(cpaOutData[,kk] ~ fracList, col=col.list[kk], pch=pch.list[kk], cex=1.5)
expect <- rep(0, length(fracList))
if (kk == i) expect <- fracList
if (kk == j) expect <- 1 - fracList
sumsq <- sumsq + sum((cpaOutData[,kk] - expect)^2)
}
abline(a=0,b=1, col="gray")
abline(a=1,b=-1, col="gray")
titleText <- paste(loc.list[i], "-", loc.list[j])
title(paste(titleText, "(", format(round(sumsq,3), nsmall=3), ")"))
}
mixturePlot(i=1, j=4, type="relAmt", log2Transf=F)
mixturePlot <- function(i,j,type="relAmt", xaxisLab=T, yaxisLab=T, log2Transf=F) {
#i=1
#j=4
#mixCytoLyso <- proteinMix(relAmtProtFrac, Loc1=i, Loc2=j)
mixProtiProtj <- proteinMix(relAmtProtFrac, Loc1=i, Loc2=j)
#mixCytoLyso
#mixCytoLysoRSA <- RSAtransform(relAmtProtFrac=mixCytoLyso, nDiffFractions=6, nNycFractions=3, totProt=totProt)$rsa
mixProtiProtjRSA <- RSAtransform(relAmtProtFrac=mixProtiProtj, nDiffFractions=6, nNycFractions=3, totProt=totProt)$rsa
#mixCytoLysoRelAmt <- data.frame(rownames(mixCytoLysoRSA), mixCytoLysoRSA)
#names(mixCytoLysoRelAmt)[1] <- "geneName"
mixProtiProtjRelAmt <- data.frame(rownames(mixProtiProtjRSA), mixProtiProtjRSA)
names(mixProtiProtjRelAmt)[1] <- "geneName"
if (type == "relAmt") {
#cpaOutT <- proLocAll(geneProfileSummary=mixCytoLysoRelAmt, matLocR=matLocRrsa,
#      n.channels=7, log2Transf=log2Transf)
cpaOutT <- proLocAll(geneProfileSummary=mixProtiProtjRelAmt, matLocR=matLocRrsa,
n.channels=7, log2Transf=log2Transf)
#cpaOutT
# the fitted proportions match the created ones perfectly
cpaOutData <- cpaOutT[,-1]
}
# Now compute what would have been the original input data:
if (type == "original") {
#rsa <- mixCytoLysoRelAmt[,2:8]
rsa <- mixProtiProtjRelAmt[,2:8]
rsaFractionsT <- t(apply(rsa,1, function(x) x/sum(x)))
#rsaFractions <- data.frame(mixCytoLysoRelAmt[,1], rsaFractionsT)
rsaFractions <- data.frame(mixProtiProtjRelAmt[,1], rsaFractionsT)
names(rsaFractions)[1] <- "geneName"
# Now run CPA on these
cpaOutT <- proLocAll(geneProfileSummary=rsaFractions, matLocR=matLocR, n.channels=7, log2Transf=log2Transf)
cpaOutData <- cpaOutT[,-1]
}
fracList <- seq(0,1,0.1)  # for creating empty plot
fracList2 <- fracList   # same values; needed for empty plot
# plot estimated proportion vs true proportion
plot(fracList ~ fracList2, type="n", xlab="", ylab="", axes=F)  # this is the empty plot
if (yaxisLab) axis(2, labels=T, at=c(0, 0.5, 1), las=1)
if (!yaxisLab) axis(2, labels=F)
if (xaxisLab) axis(1, labels=T, at=c(0, 0.5, 1))
if (!xaxisLab) axis(1, labels=F)
# calculate sum of squares of errors
sumsq <- 0
for (kk in 1:8) {
points(cpaOutData[,kk] ~ fracList, col=col.list[kk], pch=pch.list[kk], cex=1.5)
expect <- rep(0, length(fracList))
if (kk == i) expect <- fracList
if (kk == j) expect <- 1 - fracList
sumsq <- sumsq + sum((cpaOutData[,kk] - expect)^2)
}
abline(a=0,b=1, col="gray")
abline(a=1,b=-1, col="gray")
titleText <- paste(loc.list[i], "-", loc.list[j])
title(paste(titleText, "(", format(round(sumsq,3), nsmall=3), ")"))
}
mixturePlot(i=1, j=4, type="relAmt", log2Transf=F)
windows(width=8,height=10)
mixturePlotPanel()
?fformat
?format
setwd("C:\\Users\\mooredf\\OneDrive - Rutgers University\\gp7\\Res\\constrainedPropAssignDev\\protlocassignPackage\\notes")
paste("CPA assignProts Jadot", "relAmt", "noTransf")
pdf(file=paste("CPA assignProts Jadot", "relAmt", "noTransf.pdf"))
mixturePlotPanel(type="relAmt", log2Transf=F)
dev.off()
mixturePlotPanel <- function(fitType="relAmt", log2Transf=F) {
#windows(width=8,height=10)
layout(rbind(c(31,1,1,1,1),
c(31,2,3,4,5),
c(31,6,7,8,9),
c(31,10,11,12,13),
c(31,14,15,16,17),
c(31,18,19,20,21),
c(31,22,23,24,25),
c(31,26,27,28,29),
c(31,30,30,30,30)),
heights=c(0.85,2,2,2,2,2,2, 2, .35),
widths=c(0.4,2,2,2,2),respect=F)
#layout.show(31)
x <- c(0,5)
y <- c(0,0.5)
par(mar=c(0,0,0,0))
plot(y ~ x,type="n",axes=F,cex=1)
#aa <- 1.34
#log2Transf <- F
#log2Transf <- T
#fitType <- "relAmt"
#fitType <- "original"
if (!log2Transf) transF <- "no transformation"
if (log2Transf) transF <- "log2 transformed"
text(x=2.5,y=0.4,paste("CPA Synthetic Protein Assignments", fitType, transF), cex=1.5)
legend(x="bottom", legend=loc.list, col=col.list, pch=pch.list, ncol=8)
par(mar=c(3,3,3,3))
for (i in 1:7) {
for (j in (i+1):8) {
mixturePlot(i=i, j=j, type=fitType, log2Transf=log2Transf)
}
}
x <- c(0,5)
y <- c(0,0.5)
par(mar=c(0,0,0,0))
plot(y ~ x,type="n",axes=F,cex=1)
#aa <- 1.34
text(x=2.5,y=0.3,"True proportion", cex=2)
x <- c(0,5)
y <- c(0,0.5)
par(mar=c(0,0,0,0))
plot(y ~ x,type="n",axes=F,cex=1)
#aa <- 1.34
text(x=2.5,y=0.3,"Estimated proportion", cex=2, srt=90)
}
pdf(file=paste("CPA assignProts Jadot", fitType, transF, ".pdf"), width=7, height=11)
mixturePlotPanel(type="relAmt", log2Transf=F)
dev.off()
pdf(file=paste("CPA assignProts Jadot", fitType, transF, ".pdf"), width=7, height=11)
mixturePlotPanel(fitType="relAmt", log2Transf=F)
dev.off()
warnings()
fitType
transF=T
fitType="relAmt"
pdf(file=paste("CPA assignProts Jadot", fitType, transF, ".pdf"), width=7, height=11)
mixturePlotPanel(fitType="relAmt", log2Transf=T)
dev.off()
transF=F
fitType="original"
pdf(file=paste("CPA assignProts Jadot", fitType, transF, ".pdf"), width=7, height=11)
mixturePlotPanel(fitType=fitType, log2Transf=transF)
dev.off()
transF=T
fitType="original"
pdf(file=paste("CPA assignProts Jadot", fitType, transF, ".pdf"), width=7, height=11)
mixturePlotPanel(fitType=fitType, log2Transf=transF)
dev.off()
refLocProteinsJadot
library(protlocassign)
refLocProteinsJadot
library(protlocassign)
q()
